package main

import (
	"VkBot/ParserClient"
	"VkBot/vkclient"
	"fmt"
	_ "github.com/mattn/go-sqlite3" // –î—Ä–∞–π–≤–µ—Ä –¥–ª—è SQLite
	"log"
	"time"
)

func main() {
	pClient := parserclient.NewParserClient()
	sources, err := pClient.ParsSources()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v", err)
	}
	fmt.Println(sources)

	client, err := vkclient.NewVkClient()
	if err != nil {
		panic(err)
	}
	commentText := "–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æ —Ç—É—Ç üëâ https://t.me/+mn_aRMGgiEI5ZWVk"
	messageText := "–ü–æ–¥–ø–∏—Å—á–∏—Ü–∞ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æüí¶\n–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Öüëá"

	params := map[string]string{
		"commentText": commentText,
		"messageText": messageText,
		"userID":      client.Config.UserID,
		"groupToken":  client.Config.GroupToken,
		"clientID":    client.Config.ClientID,
		"groupId":     client.Config.GroupId,
		"token":       client.Config.TokenFake,
		"ownerToken":  client.Config.Token,
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
	targetTime := time.Date(2025, 1, 30, 00, 00, 00, 000, time.UTC)

	resp, err := client.TimerPost(targetTime, params, sources.Dirs[0].Photos)
	if err != nil {
		panic(err)
	}
	fmt.Println(resp)
	select {}

}
